import connectDB from '@/lib/mongodb';
import { userService } from '@/lib/services/user.service';
import { profileService } from '@/lib/services/profile.service';
import { INTERESTS, HOBBIES, PERSONALITY_TRAITS, LOCATIONS } from '@/models/types';

interface SeedUser {
  telegramId: string;
  firstName: string;
  lastName?: string;
  username?: string;
  languageCode: string;
  chatId: string;
  profile: {
    name: string;
    age: string;
    occupation: string;
    about: string;
    country: string;
    region: string;
    interests: string[];
    hobbies: string[];
    personalityTraits: string[];
    placesToVisit: string;
    instagram: string;
    announcement: string;
    photo: string;
    profile: string;
  };
}

const sampleOccupations = [
  'Software Developer', 'Designer', 'Marketing Manager', 'Teacher', 'Doctor',
  'Engineer', 'Artist', 'Photographer', 'Entrepreneur', 'Consultant',
  'Writer', 'Analyst', 'Project Manager', 'Sales Manager', 'Architect'
];

const samplePhotos = [
  'https://images.unsplash.com/photo-1494790108755-2616b9b5c9dc?w=400',
  'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400',
  'https://images.unsplash.com/photo-1517841905240-472988babdf9?w=400',
  'https://images.unsplash.com/photo-1522075469751-3847ad4b9a89?w=400',
  'https://images.unsplash.com/photo-1488161628813-04466f872be2?w=400'
];

const sampleAbouts = [
  '–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è —á–∏—Ç–∞—é –∫–Ω–∏–≥–∏ –∏ –≥–æ—Ç–æ–≤–ª—é.',
  '–ê–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –ª—é–±–ª—é —Å–ø–æ—Ä—Ç –∏ –ø—Ä–∏—Ä–æ–¥—É. –†–∞–±–æ—Ç–∞—é –≤ IT, –Ω–æ —Ö–æ–±–±–∏ —É –º–µ–Ω—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ.',
  '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å, —É–≤–ª–µ–∫–∞—é—Å—å –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –∏ –º—É–∑—ã–∫–æ–π. –ú–µ—á—Ç–∞—é –ø–æ—Å–µ—Ç–∏—Ç—å –Ø–ø–æ–Ω–∏—é.',
  '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –∏ –ª—é–±–∏—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π. –ò–∑—É—á–∞—é –Ω–æ–≤—ã–µ —è–∑—ã–∫–∏ –∏ –∫—É–ª—å—Ç—É—Ä—ã.',
  '–î–æ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –ø–æ –¥—É—Ö—É. –õ—é–±–ª—é –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä.'
];

const sampleAnnouncements = [
  '–ò—â—É –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –ø–æ –ê–∑–∏–∏. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –º–µ—Å—Ç–Ω–∞—è –∫—É—Ö–Ω—è.',
  '–•–æ—á—É –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞. –ì–æ—Ä—ã, –º–æ—Ä–µ, –Ω–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è!',
  '–ü–ª–∞–Ω–∏—Ä—É—é –ø–æ–µ–∑–¥–∫—É –≤ –ï–≤—Ä–æ–ø—É, –∏—â—É –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –∏–ª–∏ –º–µ—Å—Ç–Ω—ã—Ö –≥–∏–¥–æ–≤.',
  '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –Ω–µ–æ–±—ã—á–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ —Å–∫—Ä—ã—Ç—ã–µ –∂–µ–º—á—É–∂–∏–Ω—ã. –î–∞–≤–∞–π—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä –≤–º–µ—Å—Ç–µ!',
  '–õ—é–±–ª—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö. –ò—â—É –º–æ–¥–µ–ª–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏.'
];

function getRandomItems<T>(array: readonly T[], count: number): T[] {
  const shuffled = [...array].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

function getRandomItem<T>(array: readonly T[] | T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

function generateUsers(): SeedUser[] {
  const users: SeedUser[] = [];
  
  for (let i = 1; i <= 50; i++) {
    const telegramId = `telegram_${i.toString().padStart(3, '0')}`;
    const firstName = `User${i}`;
    const location = getRandomItem(LOCATIONS);
    const region = getRandomItem(location.regions);
    
    users.push({
      telegramId,
      firstName,
      lastName: Math.random() > 0.5 ? `Lastname${i}` : undefined,
      username: Math.random() > 0.3 ? `user${i}` : undefined,
      languageCode: Math.random() > 0.7 ? 'en' : 'ru',
      chatId: `chat_${i}`,
      profile: {
        name: firstName,
        age: (Math.floor(Math.random() * 30) + 20).toString(), // 20-50
        occupation: getRandomItem(sampleOccupations),
        about: getRandomItem(sampleAbouts),
        country: location.country,
        region: region,
        interests: getRandomItems(INTERESTS, Math.floor(Math.random() * 5) + 3), // 3-7 interests
        hobbies: getRandomItems(HOBBIES, Math.floor(Math.random() * 4) + 2), // 2-5 hobbies
        personalityTraits: getRandomItems(PERSONALITY_TRAITS, Math.floor(Math.random() * 3) + 2), // 2-4 traits
        placesToVisit: `${location.country}, ${region} –∏ –¥—Ä—É–≥–∏–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞`,
        instagram: Math.random() > 0.4 ? `user${i}_travel` : '',
        announcement: getRandomItem(sampleAnnouncements),
        photo: getRandomItem(samplePhotos),
        profile: `${getRandomItem(sampleAbouts)} –ú–æ—è —Ü–µ–ª—å - –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.`
      }
    });
  }
  
  return users;
}

async function seedDatabase() {
  try {
    console.log('üîå Connecting to MongoDB...');
    await connectDB();
    console.log('‚úÖ Connected to MongoDB');

    console.log('üóëÔ∏è Clearing existing data...');
    
    // Clear existing data
    await userService.model.deleteMany({});
    await profileService.model.deleteMany({});
    console.log('‚úÖ Existing data cleared');

    console.log('üå± Generating seed data...');
    const seedUsers = generateUsers();

    console.log('üë• Creating users and profiles...');
    let createdCount = 0;
    
    for (const seedUser of seedUsers) {
      try {
        // Create user
        const user = await userService.createUser({
          telegramId: seedUser.telegramId,
          firstName: seedUser.firstName,
          lastName: seedUser.lastName,
          username: seedUser.username,
          languageCode: seedUser.languageCode,
          chatId: seedUser.chatId
        });

        // Create profile
        await profileService.createProfile(user._id.toString(), seedUser.profile);
        
        createdCount++;
        if (createdCount % 10 === 0) {
          console.log(`‚úÖ Created ${createdCount} users...`);
        }
      } catch (error) {
        console.error(`‚ùå Error creating user ${seedUser.telegramId}:`, error);
      }
    }

    console.log(`üéâ Successfully seeded database with ${createdCount} users and profiles!`);
    
    // Print some statistics
    const totalUsers = await userService.count();
    const totalProfiles = await profileService.count();
    const completeProfiles = await profileService.count({ isComplete: true });
    
    console.log('\nüìä Database Statistics:');
    console.log(`   Users: ${totalUsers}`);
    console.log(`   Profiles: ${totalProfiles}`);
    console.log(`   Complete Profiles: ${completeProfiles}`);
    console.log(`   Completion Rate: ${Math.round((completeProfiles / totalProfiles) * 100)}%`);
    
    // Print locations distribution
    const locationStats = await profileService.aggregate([
      { $group: { _id: { country: '$country', region: '$region' }, count: { $sum: 1 } } },
      { $sort: { count: -1 } }
    ]);
    
    console.log('\nüåç Location Distribution:');
    locationStats.forEach((stat: any) => {
      console.log(`   ${stat._id.country}, ${stat._id.region}: ${stat.count} users`);
    });

    console.log('\n‚ú® Database seeding completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    process.exit(1);
  }
}

// Run seeding if called directly
if (require.main === module) {
  seedDatabase()
    .then(() => {
      console.log('üéØ Seeding process finished');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Seeding process failed:', error);
      process.exit(1);
    });
}

export { seedDatabase }; 